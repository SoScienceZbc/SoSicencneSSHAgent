// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ZbcNatur.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SoScienceDataServer
{

    /// <summary>Holder for reflection information generated from ZbcNatur.proto</summary>
    public static partial class ZbcNaturReflection
    {

        #region Descriptor
        /// <summary>File descriptor for ZbcNatur.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static ZbcNaturReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Cg5aYmNOYXR1ci5wcm90bxITU29TY2llbmNlRGF0YVNlcnZlciKcBAoHTWVz",
                  "c2FnZRI9CgttZXNzYWdlVHlwZRgBIAEoDjIoLlNvU2NpZW5jZURhdGFTZXJ2",
                  "ZXIuTWVzc2FnZS5NZXNzYWdlVHlwZRI9CgtyZXF1ZXN0VHlwZRgCIAEoDjIo",
                  "LlNvU2NpZW5jZURhdGFTZXJ2ZXIuTWVzc2FnZS5SZXF1ZXN0VHlwZRIMCgRk",
                  "YXRhGAMgASgMEhIKCmlkZW50aWZpZXIYBCABKAkSEAoIdXNlcm5hbWUYBSAB",
                  "KAkiUQoLTWVzc2FnZVR5cGUSCQoFZXJyb3IQABIICgRkb25lEAESCAoEcGFy",
                  "dBACEgsKB2NvbmZpcm0QAxIHCgNlbmQQBBINCgloZWFydGJlYXQQBSKLAgoL",
                  "UmVxdWVzdFR5cGUSCQoFZmFsc2UQABIJCgVsb2dpbhABEgcKA2tleRACEhIK",
                  "DmVuY3J5cHRpb25UZXN0EAMSDAoIdmFsaWRhdGUQBBISCg5HZXRQcm9qZWN0",
                  "TGl0ZRAHEg4KCkdldFByb2plY3QQCBIPCgtQb3N0UHJvamVjdBAJEhEKDVJl",
                  "bW92ZVByb2plY3QQChIPCgtHZXREb2N1bWVudBALEhAKDFBvc3REb2N1bWVu",
                  "dBAMEhIKDlJlbW92ZURvY3VtZW50EA0SDgoKVXBsb2FkRmlsZRAOEgsKB0dl",
                  "dEZpbGUQDxIOCgpSZW1vdmVGaWxlEBASDwoLR2V0UGFydEZpbGUQESIvCglo",
                  "ZWFydEJlYXQSEAoIdXNlcm5hbWUYASABKAkSEAoIZGF0ZXRpbWUYAiABKAki",
                  "OQoEVXNlchIQCgh1c2VybmFtZRgBIAEoCRIQCghwYXNzd29yZBgCIAEoCRIN",
                  "CgV2YWxpZBgDIAEoCCI5CghQcm9qZWN0cxItCgdwcm9qZWN0GAEgAygLMhwu",
                  "U29TY2llbmNlRGF0YVNlcnZlci5Qcm9qZWN0IoUBCgdQcm9qZWN0EgoKAklE",
                  "GAEgASgFEgwKBG5hbWUYAiABKAkSEQoJY29tcGxldGVkGAMgASgIEhIKCmxh",
                  "c3RFZGl0ZWQYBCABKAkSKAoFZmlsZXMYBSADKAsyGS5Tb1NjaWVuY2VEYXRh",
                  "U2VydmVyLkZpbGUSDwoHZW5kZGF0ZRgGIAEoCSJ8CgRGaWxlEgoKAklEGAEg",
                  "ASgFEg0KBXRpdGxlGAIgASgJEgwKBHR5cGUYAyABKAkSDAoEZGF0YRgEIAEo",
                  "CRIZChFjb21wbGV0ZWRTZXNzaW9ucxgFIAMoCRIPCgdwcm9jZW50GAYgASgB",
                  "EhEKCXByb2plY3RJRBgHIAEoBSKOAQoJTWVkaWFGaWxlEgoKAklEGAEgASgF",
                  "Eg0KBXRpdGxlGAIgASgJEgwKBHR5cGUYAyABKAkSDAoEZGF0YRgEIAEoDBIR",
                  "Cglwcm9qZWN0SUQYBSABKAUSDAoEcGFydBgGIAEoCBIMCgRzaXplGAcgASgD",
                  "Eg0KBXN0YXJ0GAggASgDEgwKBHN0b3AYCSABKAMiegoDS2V5Ei4KBHR5cGUY",
                  "ASABKA4yIC5Tb1NjaWVuY2VEYXRhU2VydmVyLktleS5LZXlUeXBlEg4KBnZh",
                  "bHVlMRgCIAEoDBIOCgZ2YWx1ZTIYAyABKAwiIwoHS2V5VHlwZRIHCgNSU0EQ",
                  "ABIHCgNBRVMQARIGCgJESBACIiAKDkVuY3J5cHRpb25UZXN0Eg4KBm51bWJl",
                  "chgBIAEoAWIGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SoScienceDataServer.Message), global::SoScienceDataServer.Message.Parser, new[]{ "MessageType", "RequestType", "Data", "Identifier", "Username" }, null, new[]{ typeof(global::SoScienceDataServer.Message.Types.MessageType), typeof(global::SoScienceDataServer.Message.Types.RequestType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoScienceDataServer.heartBeat), global::SoScienceDataServer.heartBeat.Parser, new[]{ "Username", "Datetime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoScienceDataServer.User), global::SoScienceDataServer.User.Parser, new[]{ "Username", "Password", "Valid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoScienceDataServer.Projects), global::SoScienceDataServer.Projects.Parser, new[]{ "Project" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoScienceDataServer.Project), global::SoScienceDataServer.Project.Parser, new[]{ "ID", "Name", "Completed", "LastEdited", "Files", "Enddate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoScienceDataServer.File), global::SoScienceDataServer.File.Parser, new[]{ "ID", "Title", "Type", "Data", "CompletedSessions", "Procent", "ProjectID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoScienceDataServer.MediaFile), global::SoScienceDataServer.MediaFile.Parser, new[]{ "ID", "Title", "Type", "Data", "ProjectID", "Part", "Size", "Start", "Stop" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoScienceDataServer.Key), global::SoScienceDataServer.Key.Parser, new[]{ "Type", "Value1", "Value2" }, null, new[]{ typeof(global::SoScienceDataServer.Key.Types.KeyType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoScienceDataServer.EncryptionTest), global::SoScienceDataServer.EncryptionTest.Parser, new[]{ "Number" }, null, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class Message : pb::IMessage<Message>
    {
        private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Message> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SoScienceDataServer.ZbcNaturReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message(Message other) : this()
        {
            messageType_ = other.messageType_;
            requestType_ = other.requestType_;
            data_ = other.data_;
            identifier_ = other.identifier_;
            username_ = other.username_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message Clone()
        {
            return new Message(this);
        }

        /// <summary>Field number for the "messageType" field.</summary>
        public const int MessageTypeFieldNumber = 1;
        private global::SoScienceDataServer.Message.Types.MessageType messageType_ = global::SoScienceDataServer.Message.Types.MessageType.Error;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SoScienceDataServer.Message.Types.MessageType MessageType
        {
            get { return messageType_; }
            set
            {
                messageType_ = value;
            }
        }

        /// <summary>Field number for the "requestType" field.</summary>
        public const int RequestTypeFieldNumber = 2;
        private global::SoScienceDataServer.Message.Types.RequestType requestType_ = global::SoScienceDataServer.Message.Types.RequestType.False;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SoScienceDataServer.Message.Types.RequestType RequestType
        {
            get { return requestType_; }
            set
            {
                requestType_ = value;
            }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 3;
        private pb::ByteString data_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data
        {
            get { return data_; }
            set
            {
                data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "identifier" field.</summary>
        public const int IdentifierFieldNumber = 4;
        private string identifier_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Identifier
        {
            get { return identifier_; }
            set
            {
                identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "username" field.</summary>
        public const int UsernameFieldNumber = 5;
        private string username_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Username
        {
            get { return username_; }
            set
            {
                username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Message);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Message other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MessageType != other.MessageType) return false;
            if (RequestType != other.RequestType) return false;
            if (Data != other.Data) return false;
            if (Identifier != other.Identifier) return false;
            if (Username != other.Username) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MessageType != global::SoScienceDataServer.Message.Types.MessageType.Error) hash ^= MessageType.GetHashCode();
            if (RequestType != global::SoScienceDataServer.Message.Types.RequestType.False) hash ^= RequestType.GetHashCode();
            if (Data.Length != 0) hash ^= Data.GetHashCode();
            if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
            if (Username.Length != 0) hash ^= Username.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MessageType != global::SoScienceDataServer.Message.Types.MessageType.Error)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)MessageType);
            }
            if (RequestType != global::SoScienceDataServer.Message.Types.RequestType.False)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)RequestType);
            }
            if (Data.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteBytes(Data);
            }
            if (Identifier.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Identifier);
            }
            if (Username.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(Username);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MessageType != global::SoScienceDataServer.Message.Types.MessageType.Error)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MessageType);
            }
            if (RequestType != global::SoScienceDataServer.Message.Types.RequestType.False)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)RequestType);
            }
            if (Data.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
            }
            if (Identifier.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
            }
            if (Username.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Message other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MessageType != global::SoScienceDataServer.Message.Types.MessageType.Error)
            {
                MessageType = other.MessageType;
            }
            if (other.RequestType != global::SoScienceDataServer.Message.Types.RequestType.False)
            {
                RequestType = other.RequestType;
            }
            if (other.Data.Length != 0)
            {
                Data = other.Data;
            }
            if (other.Identifier.Length != 0)
            {
                Identifier = other.Identifier;
            }
            if (other.Username.Length != 0)
            {
                Username = other.Username;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            MessageType = (global::SoScienceDataServer.Message.Types.MessageType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            RequestType = (global::SoScienceDataServer.Message.Types.RequestType)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            Data = input.ReadBytes();
                            break;
                        }
                    case 34:
                        {
                            Identifier = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            Username = input.ReadString();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Message message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum MessageType
            {
                [pbr::OriginalName("error")] Error = 0,
                [pbr::OriginalName("done")] Done = 1,
                [pbr::OriginalName("part")] Part = 2,
                [pbr::OriginalName("confirm")] Confirm = 3,
                [pbr::OriginalName("end")] End = 4,
                [pbr::OriginalName("heartbeat")] Heartbeat = 5,
            }

            public enum RequestType
            {
                [pbr::OriginalName("false")] False = 0,
                [pbr::OriginalName("login")] Login = 1,
                [pbr::OriginalName("key")] Key = 2,
                [pbr::OriginalName("encryptionTest")] EncryptionTest = 3,
                [pbr::OriginalName("validate")] Validate = 4,
                [pbr::OriginalName("GetProjectLite")] GetProjectLite = 7,
                [pbr::OriginalName("GetProject")] GetProject = 8,
                [pbr::OriginalName("PostProject")] PostProject = 9,
                [pbr::OriginalName("RemoveProject")] RemoveProject = 10,
                [pbr::OriginalName("GetDocument")] GetDocument = 11,
                [pbr::OriginalName("PostDocument")] PostDocument = 12,
                [pbr::OriginalName("RemoveDocument")] RemoveDocument = 13,
                [pbr::OriginalName("UploadFile")] UploadFile = 14,
                [pbr::OriginalName("GetFile")] GetFile = 15,
                [pbr::OriginalName("RemoveFile")] RemoveFile = 16,
                [pbr::OriginalName("GetPartFile")] GetPartFile = 17,
            }

        }
        #endregion

    }

    public sealed partial class heartBeat : pb::IMessage<heartBeat>
    {
        private static readonly pb::MessageParser<heartBeat> _parser = new pb::MessageParser<heartBeat>(() => new heartBeat());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<heartBeat> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SoScienceDataServer.ZbcNaturReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public heartBeat()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public heartBeat(heartBeat other) : this()
        {
            username_ = other.username_;
            datetime_ = other.datetime_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public heartBeat Clone()
        {
            return new heartBeat(this);
        }

        /// <summary>Field number for the "username" field.</summary>
        public const int UsernameFieldNumber = 1;
        private string username_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Username
        {
            get { return username_; }
            set
            {
                username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "datetime" field.</summary>
        public const int DatetimeFieldNumber = 2;
        private string datetime_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Datetime
        {
            get { return datetime_; }
            set
            {
                datetime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as heartBeat);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(heartBeat other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Username != other.Username) return false;
            if (Datetime != other.Datetime) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Username.Length != 0) hash ^= Username.GetHashCode();
            if (Datetime.Length != 0) hash ^= Datetime.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Username.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Username);
            }
            if (Datetime.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Datetime);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Username.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
            }
            if (Datetime.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Datetime);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(heartBeat other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Username.Length != 0)
            {
                Username = other.Username;
            }
            if (other.Datetime.Length != 0)
            {
                Datetime = other.Datetime;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Username = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Datetime = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class User : pb::IMessage<User>
    {
        private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<User> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SoScienceDataServer.ZbcNaturReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public User()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public User(User other) : this()
        {
            username_ = other.username_;
            password_ = other.password_;
            valid_ = other.valid_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public User Clone()
        {
            return new User(this);
        }

        /// <summary>Field number for the "username" field.</summary>
        public const int UsernameFieldNumber = 1;
        private string username_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Username
        {
            get { return username_; }
            set
            {
                username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "password" field.</summary>
        public const int PasswordFieldNumber = 2;
        private string password_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Password
        {
            get { return password_; }
            set
            {
                password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "valid" field.</summary>
        public const int ValidFieldNumber = 3;
        private bool valid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Valid
        {
            get { return valid_; }
            set
            {
                valid_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as User);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(User other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Username != other.Username) return false;
            if (Password != other.Password) return false;
            if (Valid != other.Valid) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Username.Length != 0) hash ^= Username.GetHashCode();
            if (Password.Length != 0) hash ^= Password.GetHashCode();
            if (Valid != false) hash ^= Valid.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Username.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Username);
            }
            if (Password.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Password);
            }
            if (Valid != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(Valid);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Username.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
            }
            if (Password.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
            }
            if (Valid != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(User other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Username.Length != 0)
            {
                Username = other.Username;
            }
            if (other.Password.Length != 0)
            {
                Password = other.Password;
            }
            if (other.Valid != false)
            {
                Valid = other.Valid;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Username = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Password = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            Valid = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Projects : pb::IMessage<Projects>
    {
        private static readonly pb::MessageParser<Projects> _parser = new pb::MessageParser<Projects>(() => new Projects());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Projects> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SoScienceDataServer.ZbcNaturReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projects()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projects(Projects other) : this()
        {
            project_ = other.project_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projects Clone()
        {
            return new Projects(this);
        }

        /// <summary>Field number for the "project" field.</summary>
        public const int ProjectFieldNumber = 1;
        private static readonly pb::FieldCodec<global::SoScienceDataServer.Project> _repeated_project_codec
            = pb::FieldCodec.ForMessage(10, global::SoScienceDataServer.Project.Parser);
        private readonly pbc::RepeatedField<global::SoScienceDataServer.Project> project_ = new pbc::RepeatedField<global::SoScienceDataServer.Project>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SoScienceDataServer.Project> Project
        {
            get { return project_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Projects);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Projects other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!project_.Equals(other.project_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= project_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            project_.WriteTo(output, _repeated_project_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += project_.CalculateSize(_repeated_project_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Projects other)
        {
            if (other == null)
            {
                return;
            }
            project_.Add(other.project_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            project_.AddEntriesFrom(input, _repeated_project_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Project : pb::IMessage<Project>
    {
        private static readonly pb::MessageParser<Project> _parser = new pb::MessageParser<Project>(() => new Project());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Project> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SoScienceDataServer.ZbcNaturReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Project()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Project(Project other) : this()
        {
            iD_ = other.iD_;
            name_ = other.name_;
            completed_ = other.completed_;
            lastEdited_ = other.lastEdited_;
            files_ = other.files_.Clone();
            enddate_ = other.enddate_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Project Clone()
        {
            return new Project(this);
        }

        /// <summary>Field number for the "ID" field.</summary>
        public const int IDFieldNumber = 1;
        private int iD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ID
        {
            get { return iD_; }
            set
            {
                iD_ = value;
            }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "completed" field.</summary>
        public const int CompletedFieldNumber = 3;
        private bool completed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Completed
        {
            get { return completed_; }
            set
            {
                completed_ = value;
            }
        }

        /// <summary>Field number for the "lastEdited" field.</summary>
        public const int LastEditedFieldNumber = 4;
        private string lastEdited_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LastEdited
        {
            get { return lastEdited_; }
            set
            {
                lastEdited_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "files" field.</summary>
        public const int FilesFieldNumber = 5;
        private static readonly pb::FieldCodec<global::SoScienceDataServer.File> _repeated_files_codec
            = pb::FieldCodec.ForMessage(42, global::SoScienceDataServer.File.Parser);
        private readonly pbc::RepeatedField<global::SoScienceDataServer.File> files_ = new pbc::RepeatedField<global::SoScienceDataServer.File>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::SoScienceDataServer.File> Files
        {
            get { return files_; }
        }

        /// <summary>Field number for the "enddate" field.</summary>
        public const int EnddateFieldNumber = 6;
        private string enddate_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Enddate
        {
            get { return enddate_; }
            set
            {
                enddate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Project);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Project other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ID != other.ID) return false;
            if (Name != other.Name) return false;
            if (Completed != other.Completed) return false;
            if (LastEdited != other.LastEdited) return false;
            if (!files_.Equals(other.files_)) return false;
            if (Enddate != other.Enddate) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ID != 0) hash ^= ID.GetHashCode();
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Completed != false) hash ^= Completed.GetHashCode();
            if (LastEdited.Length != 0) hash ^= LastEdited.GetHashCode();
            hash ^= files_.GetHashCode();
            if (Enddate.Length != 0) hash ^= Enddate.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ID != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ID);
            }
            if (Name.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Name);
            }
            if (Completed != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(Completed);
            }
            if (LastEdited.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(LastEdited);
            }
            files_.WriteTo(output, _repeated_files_codec);
            if (Enddate.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(Enddate);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
            }
            if (Name.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (Completed != false)
            {
                size += 1 + 1;
            }
            if (LastEdited.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LastEdited);
            }
            size += files_.CalculateSize(_repeated_files_codec);
            if (Enddate.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Enddate);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Project other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ID != 0)
            {
                ID = other.ID;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Completed != false)
            {
                Completed = other.Completed;
            }
            if (other.LastEdited.Length != 0)
            {
                LastEdited = other.LastEdited;
            }
            files_.Add(other.files_);
            if (other.Enddate.Length != 0)
            {
                Enddate = other.Enddate;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ID = input.ReadInt32();
                            break;
                        }
                    case 18:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            Completed = input.ReadBool();
                            break;
                        }
                    case 34:
                        {
                            LastEdited = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            files_.AddEntriesFrom(input, _repeated_files_codec);
                            break;
                        }
                    case 50:
                        {
                            Enddate = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class File : pb::IMessage<File>
    {
        private static readonly pb::MessageParser<File> _parser = new pb::MessageParser<File>(() => new File());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<File> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SoScienceDataServer.ZbcNaturReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public File()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public File(File other) : this()
        {
            iD_ = other.iD_;
            title_ = other.title_;
            type_ = other.type_;
            data_ = other.data_;
            completedSessions_ = other.completedSessions_.Clone();
            procent_ = other.procent_;
            projectID_ = other.projectID_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public File Clone()
        {
            return new File(this);
        }

        /// <summary>Field number for the "ID" field.</summary>
        public const int IDFieldNumber = 1;
        private int iD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ID
        {
            get { return iD_; }
            set
            {
                iD_ = value;
            }
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 2;
        private string title_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title
        {
            get { return title_; }
            set
            {
                title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private string type_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Type
        {
            get { return type_; }
            set
            {
                type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 4;
        private string data_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Data
        {
            get { return data_; }
            set
            {
                data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "completedSessions" field.</summary>
        public const int CompletedSessionsFieldNumber = 5;
        private static readonly pb::FieldCodec<string> _repeated_completedSessions_codec
            = pb::FieldCodec.ForString(42);
        private readonly pbc::RepeatedField<string> completedSessions_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> CompletedSessions
        {
            get { return completedSessions_; }
        }

        /// <summary>Field number for the "procent" field.</summary>
        public const int ProcentFieldNumber = 6;
        private double procent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Procent
        {
            get { return procent_; }
            set
            {
                procent_ = value;
            }
        }

        /// <summary>Field number for the "projectID" field.</summary>
        public const int ProjectIDFieldNumber = 7;
        private int projectID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ProjectID
        {
            get { return projectID_; }
            set
            {
                projectID_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as File);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(File other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ID != other.ID) return false;
            if (Title != other.Title) return false;
            if (Type != other.Type) return false;
            if (Data != other.Data) return false;
            if (!completedSessions_.Equals(other.completedSessions_)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Procent, other.Procent)) return false;
            if (ProjectID != other.ProjectID) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ID != 0) hash ^= ID.GetHashCode();
            if (Title.Length != 0) hash ^= Title.GetHashCode();
            if (Type.Length != 0) hash ^= Type.GetHashCode();
            if (Data.Length != 0) hash ^= Data.GetHashCode();
            hash ^= completedSessions_.GetHashCode();
            if (Procent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Procent);
            if (ProjectID != 0) hash ^= ProjectID.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ID != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ID);
            }
            if (Title.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Title);
            }
            if (Type.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Type);
            }
            if (Data.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Data);
            }
            completedSessions_.WriteTo(output, _repeated_completedSessions_codec);
            if (Procent != 0D)
            {
                output.WriteRawTag(49);
                output.WriteDouble(Procent);
            }
            if (ProjectID != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(ProjectID);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
            }
            if (Title.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
            }
            if (Type.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
            }
            if (Data.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
            }
            size += completedSessions_.CalculateSize(_repeated_completedSessions_codec);
            if (Procent != 0D)
            {
                size += 1 + 8;
            }
            if (ProjectID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProjectID);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(File other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ID != 0)
            {
                ID = other.ID;
            }
            if (other.Title.Length != 0)
            {
                Title = other.Title;
            }
            if (other.Type.Length != 0)
            {
                Type = other.Type;
            }
            if (other.Data.Length != 0)
            {
                Data = other.Data;
            }
            completedSessions_.Add(other.completedSessions_);
            if (other.Procent != 0D)
            {
                Procent = other.Procent;
            }
            if (other.ProjectID != 0)
            {
                ProjectID = other.ProjectID;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ID = input.ReadInt32();
                            break;
                        }
                    case 18:
                        {
                            Title = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            Type = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            Data = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            completedSessions_.AddEntriesFrom(input, _repeated_completedSessions_codec);
                            break;
                        }
                    case 49:
                        {
                            Procent = input.ReadDouble();
                            break;
                        }
                    case 56:
                        {
                            ProjectID = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class MediaFile : pb::IMessage<MediaFile>
    {
        private static readonly pb::MessageParser<MediaFile> _parser = new pb::MessageParser<MediaFile>(() => new MediaFile());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MediaFile> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SoScienceDataServer.ZbcNaturReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MediaFile()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MediaFile(MediaFile other) : this()
        {
            iD_ = other.iD_;
            title_ = other.title_;
            type_ = other.type_;
            data_ = other.data_;
            projectID_ = other.projectID_;
            part_ = other.part_;
            size_ = other.size_;
            start_ = other.start_;
            stop_ = other.stop_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MediaFile Clone()
        {
            return new MediaFile(this);
        }

        /// <summary>Field number for the "ID" field.</summary>
        public const int IDFieldNumber = 1;
        private int iD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ID
        {
            get { return iD_; }
            set
            {
                iD_ = value;
            }
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 2;
        private string title_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title
        {
            get { return title_; }
            set
            {
                title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private string type_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Type
        {
            get { return type_; }
            set
            {
                type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 4;
        private pb::ByteString data_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data
        {
            get { return data_; }
            set
            {
                data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "projectID" field.</summary>
        public const int ProjectIDFieldNumber = 5;
        private int projectID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ProjectID
        {
            get { return projectID_; }
            set
            {
                projectID_ = value;
            }
        }

        /// <summary>Field number for the "part" field.</summary>
        public const int PartFieldNumber = 6;
        private bool part_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Part
        {
            get { return part_; }
            set
            {
                part_ = value;
            }
        }

        /// <summary>Field number for the "size" field.</summary>
        public const int SizeFieldNumber = 7;
        private long size_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Size
        {
            get { return size_; }
            set
            {
                size_ = value;
            }
        }

        /// <summary>Field number for the "start" field.</summary>
        public const int StartFieldNumber = 8;
        private long start_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Start
        {
            get { return start_; }
            set
            {
                start_ = value;
            }
        }

        /// <summary>Field number for the "stop" field.</summary>
        public const int StopFieldNumber = 9;
        private long stop_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Stop
        {
            get { return stop_; }
            set
            {
                stop_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as MediaFile);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MediaFile other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ID != other.ID) return false;
            if (Title != other.Title) return false;
            if (Type != other.Type) return false;
            if (Data != other.Data) return false;
            if (ProjectID != other.ProjectID) return false;
            if (Part != other.Part) return false;
            if (Size != other.Size) return false;
            if (Start != other.Start) return false;
            if (Stop != other.Stop) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ID != 0) hash ^= ID.GetHashCode();
            if (Title.Length != 0) hash ^= Title.GetHashCode();
            if (Type.Length != 0) hash ^= Type.GetHashCode();
            if (Data.Length != 0) hash ^= Data.GetHashCode();
            if (ProjectID != 0) hash ^= ProjectID.GetHashCode();
            if (Part != false) hash ^= Part.GetHashCode();
            if (Size != 0L) hash ^= Size.GetHashCode();
            if (Start != 0L) hash ^= Start.GetHashCode();
            if (Stop != 0L) hash ^= Stop.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ID != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ID);
            }
            if (Title.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Title);
            }
            if (Type.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Type);
            }
            if (Data.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteBytes(Data);
            }
            if (ProjectID != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(ProjectID);
            }
            if (Part != false)
            {
                output.WriteRawTag(48);
                output.WriteBool(Part);
            }
            if (Size != 0L)
            {
                output.WriteRawTag(56);
                output.WriteInt64(Size);
            }
            if (Start != 0L)
            {
                output.WriteRawTag(64);
                output.WriteInt64(Start);
            }
            if (Stop != 0L)
            {
                output.WriteRawTag(72);
                output.WriteInt64(Stop);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
            }
            if (Title.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
            }
            if (Type.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
            }
            if (Data.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
            }
            if (ProjectID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProjectID);
            }
            if (Part != false)
            {
                size += 1 + 1;
            }
            if (Size != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
            }
            if (Start != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
            }
            if (Stop != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Stop);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MediaFile other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ID != 0)
            {
                ID = other.ID;
            }
            if (other.Title.Length != 0)
            {
                Title = other.Title;
            }
            if (other.Type.Length != 0)
            {
                Type = other.Type;
            }
            if (other.Data.Length != 0)
            {
                Data = other.Data;
            }
            if (other.ProjectID != 0)
            {
                ProjectID = other.ProjectID;
            }
            if (other.Part != false)
            {
                Part = other.Part;
            }
            if (other.Size != 0L)
            {
                Size = other.Size;
            }
            if (other.Start != 0L)
            {
                Start = other.Start;
            }
            if (other.Stop != 0L)
            {
                Stop = other.Stop;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ID = input.ReadInt32();
                            break;
                        }
                    case 18:
                        {
                            Title = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            Type = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            Data = input.ReadBytes();
                            break;
                        }
                    case 40:
                        {
                            ProjectID = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            Part = input.ReadBool();
                            break;
                        }
                    case 56:
                        {
                            Size = input.ReadInt64();
                            break;
                        }
                    case 64:
                        {
                            Start = input.ReadInt64();
                            break;
                        }
                    case 72:
                        {
                            Stop = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Key : pb::IMessage<Key>
    {
        private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Key> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SoScienceDataServer.ZbcNaturReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Key()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Key(Key other) : this()
        {
            type_ = other.type_;
            value1_ = other.value1_;
            value2_ = other.value2_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Key Clone()
        {
            return new Key(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::SoScienceDataServer.Key.Types.KeyType type_ = global::SoScienceDataServer.Key.Types.KeyType.Rsa;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SoScienceDataServer.Key.Types.KeyType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "value1" field.</summary>
        public const int Value1FieldNumber = 2;
        private pb::ByteString value1_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value1
        {
            get { return value1_; }
            set
            {
                value1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "value2" field.</summary>
        public const int Value2FieldNumber = 3;
        private pb::ByteString value2_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value2
        {
            get { return value2_; }
            set
            {
                value2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Key);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Key other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (Value1 != other.Value1) return false;
            if (Value2 != other.Value2) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != global::SoScienceDataServer.Key.Types.KeyType.Rsa) hash ^= Type.GetHashCode();
            if (Value1.Length != 0) hash ^= Value1.GetHashCode();
            if (Value2.Length != 0) hash ^= Value2.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != global::SoScienceDataServer.Key.Types.KeyType.Rsa)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (Value1.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(Value1);
            }
            if (Value2.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteBytes(Value2);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != global::SoScienceDataServer.Key.Types.KeyType.Rsa)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (Value1.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value1);
            }
            if (Value2.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value2);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Key other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != global::SoScienceDataServer.Key.Types.KeyType.Rsa)
            {
                Type = other.Type;
            }
            if (other.Value1.Length != 0)
            {
                Value1 = other.Value1;
            }
            if (other.Value2.Length != 0)
            {
                Value2 = other.Value2;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Type = (global::SoScienceDataServer.Key.Types.KeyType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            Value1 = input.ReadBytes();
                            break;
                        }
                    case 26:
                        {
                            Value2 = input.ReadBytes();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Key message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum KeyType
            {
                [pbr::OriginalName("RSA")] Rsa = 0,
                [pbr::OriginalName("AES")] Aes = 1,
                [pbr::OriginalName("DH")] Dh = 2,
            }

        }
        #endregion

    }

    public sealed partial class EncryptionTest : pb::IMessage<EncryptionTest>
    {
        private static readonly pb::MessageParser<EncryptionTest> _parser = new pb::MessageParser<EncryptionTest>(() => new EncryptionTest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EncryptionTest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::SoScienceDataServer.ZbcNaturReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncryptionTest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncryptionTest(EncryptionTest other) : this()
        {
            number_ = other.number_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EncryptionTest Clone()
        {
            return new EncryptionTest(this);
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 1;
        private double number_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Number
        {
            get { return number_; }
            set
            {
                number_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as EncryptionTest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EncryptionTest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Number, other.Number)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Number != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Number);
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Number != 0D)
            {
                output.WriteRawTag(9);
                output.WriteDouble(Number);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Number != 0D)
            {
                size += 1 + 8;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EncryptionTest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Number != 0D)
            {
                Number = other.Number;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 9:
                        {
                            Number = input.ReadDouble();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
